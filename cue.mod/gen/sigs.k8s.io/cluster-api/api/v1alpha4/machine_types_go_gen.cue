// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go sigs.k8s.io/cluster-api/api/v1alpha4

package v1alpha4

import (
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	capierrors "sigs.k8s.io/cluster-api/errors"
)

// MachineFinalizer is set on PrepareForCreate callback.
#MachineFinalizer: "machine.cluster.x-k8s.io"

// MachineControlPlaneLabelName is the label set on machines or related objects that are part of a control plane.
#MachineControlPlaneLabelName: "cluster.x-k8s.io/control-plane"

// ExcludeNodeDrainingAnnotation annotation explicitly skips node draining if set.
#ExcludeNodeDrainingAnnotation: "machine.cluster.x-k8s.io/exclude-node-draining"

// MachineSetLabelName is the label set on machines if they're controlled by MachineSet.
#MachineSetLabelName: "cluster.x-k8s.io/set-name"

// MachineDeploymentLabelName is the label set on machines if they're controlled by MachineDeployment.
#MachineDeploymentLabelName: "cluster.x-k8s.io/deployment-name"

// PreDrainDeleteHookAnnotationPrefix annotation specifies the prefix we
// search each annotation for during the pre-drain.delete lifecycle hook
// to pause reconciliation of deletion. These hooks will prevent removal of
// draining the associated node until all are removed.
#PreDrainDeleteHookAnnotationPrefix: "pre-drain.delete.hook.machine.cluster.x-k8s.io"

// PreTerminateDeleteHookAnnotationPrefix annotation specifies the prefix we
// search each annotation for during the pre-terminate.delete lifecycle hook
// to pause reconciliation of deletion. These hooks will prevent removal of
// an instance from an infrastructure provider until all are removed.
#PreTerminateDeleteHookAnnotationPrefix: "pre-terminate.delete.hook.machine.cluster.x-k8s.io"

// MachineSpec defines the desired state of Machine.
#MachineSpec: {
	// ClusterName is the name of the Cluster this object belongs to.
	// +kubebuilder:validation:MinLength=1
	clusterName: string @go(ClusterName)

	// Bootstrap is a reference to a local struct which encapsulates
	// fields to configure the Machine’s bootstrapping mechanism.
	bootstrap: #Bootstrap @go(Bootstrap)

	// InfrastructureRef is a required reference to a custom resource
	// offered by an infrastructure provider.
	infrastructureRef: corev1.#ObjectReference @go(InfrastructureRef)

	// Version defines the desired Kubernetes version.
	// This field is meant to be optionally used by bootstrap providers.
	// +optional
	version?: null | string @go(Version,*string)

	// ProviderID is the identification ID of the machine provided by the provider.
	// This field must match the provider ID as seen on the node object corresponding to this machine.
	// This field is required by higher level consumers of cluster-api. Example use case is cluster autoscaler
	// with cluster-api as provider. Clean-up logic in the autoscaler compares machines to nodes to find out
	// machines at provider which could not get registered as Kubernetes nodes. With cluster-api as a
	// generic out-of-tree provider for autoscaler, this field is required by autoscaler to be
	// able to have a provider view of the list of machines. Another list of nodes is queried from the k8s apiserver
	// and then a comparison is done to find out unregistered machines and are marked for delete.
	// This field will be set by the actuators and consumed by higher level entities like autoscaler that will
	// be interfacing with cluster-api as generic provider.
	// +optional
	providerID?: null | string @go(ProviderID,*string)

	// FailureDomain is the failure domain the machine will be created in.
	// Must match a key in the FailureDomains map stored on the cluster object.
	// +optional
	failureDomain?: null | string @go(FailureDomain,*string)

	// NodeDrainTimeout is the total amount of time that the controller will spend on draining a node.
	// The default value is 0, meaning that the node can be drained without any time limitations.
	// NOTE: NodeDrainTimeout is different from `kubectl drain --timeout`
	// +optional
	nodeDrainTimeout?: null | metav1.#Duration @go(NodeDrainTimeout,*metav1.Duration)
}

// MachineStatus defines the observed state of Machine.
#MachineStatus: {
	// NodeRef will point to the corresponding Node if it exists.
	// +optional
	nodeRef?: null | corev1.#ObjectReference @go(NodeRef,*corev1.ObjectReference)

	// NodeInfo is a set of ids/uuids to uniquely identify the node.
	// More info: https://kubernetes.io/docs/concepts/nodes/node/#info
	// +optional
	nodeInfo?: null | corev1.#NodeSystemInfo @go(NodeInfo,*corev1.NodeSystemInfo)

	// LastUpdated identifies when the phase of the Machine last transitioned.
	// +optional
	lastUpdated?: null | metav1.#Time @go(LastUpdated,*metav1.Time)

	// Version specifies the current version of Kubernetes running
	// on the corresponding Node. This is meant to be a means of bubbling
	// up status from the Node to the Machine.
	// It is entirely optional, but useful for end-user UX if it’s present.
	// +optional
	version?: null | string @go(Version,*string)

	// FailureReason will be set in the event that there is a terminal problem
	// reconciling the Machine and will contain a succinct value suitable
	// for machine interpretation.
	//
	// This field should not be set for transitive errors that a controller
	// faces that are expected to be fixed automatically over
	// time (like service outages), but instead indicate that something is
	// fundamentally wrong with the Machine's spec or the configuration of
	// the controller, and that manual intervention is required. Examples
	// of terminal errors would be invalid combinations of settings in the
	// spec, values that are unsupported by the controller, or the
	// responsible controller itself being critically misconfigured.
	//
	// Any transient errors that occur during the reconciliation of Machines
	// can be added as events to the Machine object and/or logged in the
	// controller's output.
	// +optional
	failureReason?: null | capierrors.#MachineStatusError @go(FailureReason,*capierrors.MachineStatusError)

	// FailureMessage will be set in the event that there is a terminal problem
	// reconciling the Machine and will contain a more verbose string suitable
	// for logging and human consumption.
	//
	// This field should not be set for transitive errors that a controller
	// faces that are expected to be fixed automatically over
	// time (like service outages), but instead indicate that something is
	// fundamentally wrong with the Machine's spec or the configuration of
	// the controller, and that manual intervention is required. Examples
	// of terminal errors would be invalid combinations of settings in the
	// spec, values that are unsupported by the controller, or the
	// responsible controller itself being critically misconfigured.
	//
	// Any transient errors that occur during the reconciliation of Machines
	// can be added as events to the Machine object and/or logged in the
	// controller's output.
	// +optional
	failureMessage?: null | string @go(FailureMessage,*string)

	// Addresses is a list of addresses assigned to the machine.
	// This field is copied from the infrastructure provider reference.
	// +optional
	addresses?: #MachineAddresses @go(Addresses)

	// Phase represents the current phase of machine actuation.
	// E.g. Pending, Running, Terminating, Failed etc.
	// +optional
	phase?: string @go(Phase)

	// BootstrapReady is the state of the bootstrap provider.
	// +optional
	bootstrapReady: bool @go(BootstrapReady)

	// InfrastructureReady is the state of the infrastructure provider.
	// +optional
	infrastructureReady: bool @go(InfrastructureReady)

	// ObservedGeneration is the latest generation observed by the controller.
	// +optional
	observedGeneration?: int64 @go(ObservedGeneration)

	// Conditions defines current service state of the Machine.
	// +optional
	conditions?: #Conditions @go(Conditions)
}

// Bootstrap encapsulates fields to configure the Machine’s bootstrapping mechanism.
#Bootstrap: {
	// ConfigRef is a reference to a bootstrap provider-specific resource
	// that holds configuration details. The reference is optional to
	// allow users/operators to specify Bootstrap.DataSecretName without
	// the need of a controller.
	// +optional
	configRef?: null | corev1.#ObjectReference @go(ConfigRef,*corev1.ObjectReference)

	// DataSecretName is the name of the secret that stores the bootstrap data script.
	// If nil, the Machine should remain in the Pending state.
	// +optional
	dataSecretName?: null | string @go(DataSecretName,*string)
}

// Machine is the Schema for the machines API.
//
// Deprecated: This type will be removed in one of the next releases.
#Machine: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec?:     #MachineSpec       @go(Spec)
	status?:   #MachineStatus     @go(Status)
}

// MachineList contains a list of Machine.
//
// Deprecated: This type will be removed in one of the next releases.
#MachineList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Machine] @go(Items,[]Machine)
}
