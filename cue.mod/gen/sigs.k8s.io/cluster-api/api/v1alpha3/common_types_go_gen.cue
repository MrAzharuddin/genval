// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go sigs.k8s.io/cluster-api/api/v1alpha3

package v1alpha3

import (
	corev1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ClusterLabelName is the label set on machines linked to a cluster and
// external objects(bootstrap and infrastructure providers).
#ClusterLabelName: "cluster.x-k8s.io/cluster-name"

// ProviderLabelName is the label set on components in the provider manifest.
// This label allows to easily identify all the components belonging to a provider; the clusterctl
// tool uses this label for implementing provider's lifecycle operations.
#ProviderLabelName: "cluster.x-k8s.io/provider"

// ClusterNameAnnotation is the annotation set on nodes identifying the name of the cluster the node belongs to.
#ClusterNameAnnotation: "cluster.x-k8s.io/cluster-name"

// ClusterNamespaceAnnotation is the annotation set on nodes identifying the namespace of the cluster the node belongs to.
#ClusterNamespaceAnnotation: "cluster.x-k8s.io/cluster-namespace"

// MachineAnnotation is the annotation set on nodes identifying the machine the node belongs to.
#MachineAnnotation: "cluster.x-k8s.io/machine"

// OwnerKindAnnotation is the annotation set on nodes identifying the owner kind.
#OwnerKindAnnotation: "cluster.x-k8s.io/owner-kind"

// OwnerNameAnnotation is the annotation set on nodes identifying the owner name.
#OwnerNameAnnotation: "cluster.x-k8s.io/owner-name"

// PausedAnnotation is an annotation that can be applied to any Cluster API
// object to prevent a controller from processing a resource.
//
// Controllers working with Cluster API objects must check the existence of this annotation
// on the reconciled object.
#PausedAnnotation: "cluster.x-k8s.io/paused"

// DeleteMachineAnnotation marks control plane and worker nodes that will be given priority for deletion
// when KCP or a machineset scales down. This annotation is given top priority on all delete policies.
#DeleteMachineAnnotation: "cluster.x-k8s.io/delete-machine"

// TemplateClonedFromNameAnnotation is the infrastructure machine annotation that stores the name of the infrastructure template resource
// that was cloned for the machine. This annotation is set only during cloning a template. Older/adopted machines will not have this annotation.
#TemplateClonedFromNameAnnotation: "cluster.x-k8s.io/cloned-from-name"

// TemplateClonedFromGroupKindAnnotation is the infrastructure machine annotation that stores the group-kind of the infrastructure template resource
// that was cloned for the machine. This annotation is set only during cloning a template. Older/adopted machines will not have this annotation.
#TemplateClonedFromGroupKindAnnotation: "cluster.x-k8s.io/cloned-from-groupkind"

// MachineSkipRemediationAnnotation is the annotation used to mark the machines that should not be considered for remediation by MachineHealthCheck reconciler.
#MachineSkipRemediationAnnotation: "cluster.x-k8s.io/skip-remediation"

// ClusterSecretType defines the type of secret created by core components.
#ClusterSecretType: corev1.#SecretType & "cluster.x-k8s.io/secret"

// MachineAddressType describes a valid MachineAddress type.
#MachineAddressType: string // #enumMachineAddressType

#enumMachineAddressType:
	#MachineHostName |
	#MachineExternalIP |
	#MachineInternalIP |
	#MachineExternalDNS |
	#MachineInternalDNS

#MachineHostName:    #MachineAddressType & "Hostname"
#MachineExternalIP:  #MachineAddressType & "ExternalIP"
#MachineInternalIP:  #MachineAddressType & "InternalIP"
#MachineExternalDNS: #MachineAddressType & "ExternalDNS"
#MachineInternalDNS: #MachineAddressType & "InternalDNS"

// MachineNodeNameIndex is used by the Machine Controller to index Machines by Node name, and add a watch on Nodes.
#MachineNodeNameIndex: "status.nodeRef.name"

// MachineAddress contains information for the node's address.
#MachineAddress: {
	// Machine address type, one of Hostname, ExternalIP or InternalIP.
	type: #MachineAddressType @go(Type)

	// The machine address.
	address: string @go(Address)
}

// MachineAddresses is a slice of MachineAddress items to be used by infrastructure providers.
#MachineAddresses: [...#MachineAddress]

// ObjectMeta is metadata that all persisted resources must have, which includes all objects
// users must create. This is a copy of customizable fields from metav1.ObjectMeta.
//
// ObjectMeta is embedded in `Machine.Spec`, `MachineDeployment.Template` and `MachineSet.Template`,
// which are not top-level Kubernetes objects. Given that metav1.ObjectMeta has lots of special cases
// and read-only fields which end up in the generated CRD validation, having it as a subset simplifies
// the API and some issues that can impact user experience.
//
// During the [upgrade to controller-tools@v2](https://github.com/kubernetes-sigs/cluster-api/pull/1054)
// for v1alpha2, we noticed a failure would occur running Cluster API test suite against the new CRDs,
// specifically `spec.metadata.creationTimestamp in body must be of type string: "null"`.
// The investigation showed that `controller-tools@v2` behaves differently than its previous version
// when handling types from [metav1](k8s.io/apimachinery/pkg/apis/meta/v1) package.
//
// In more details, we found that embedded (non-top level) types that embedded `metav1.ObjectMeta`
// had validation properties, including for `creationTimestamp` (metav1.Time).
// The `metav1.Time` type specifies a custom json marshaller that, when IsZero() is true, returns `null`
// which breaks validation because the field isn't marked as nullable.
//
// In future versions, controller-tools@v2 might allow overriding the type and validation for embedded
// types. When that happens, this hack should be revisited.
#ObjectMeta: {
	// Name must be unique within a namespace. Is required when creating resources, although
	// some resources may allow a client to request the generation of an appropriate name
	// automatically. Name is primarily intended for creation idempotence and configuration
	// definition.
	// Cannot be updated.
	// More info: http://kubernetes.io/docs/user-guide/identifiers#names
	// +optional
	//
	// Deprecated: This field has no function and is going to be removed in a next release.
	name?: string @go(Name)

	// GenerateName is an optional prefix, used by the server, to generate a unique
	// name ONLY IF the Name field has not been provided.
	// If this field is used, the name returned to the client will be different
	// than the name passed. This value will also be combined with a unique suffix.
	// The provided value has the same validation rules as the Name field,
	// and may be truncated by the length of the suffix required to make the value
	// unique on the server.
	//
	// If this field is specified and the generated name exists, the server will
	// NOT return a 409 - instead, it will either return 201 Created or 500 with Reason
	// ServerTimeout indicating a unique name could not be found in the time allotted, and the client
	// should retry (optionally after the time indicated in the Retry-After header).
	//
	// Applied only if Name is not specified.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#idempotency
	// +optional
	//
	// Deprecated: This field has no function and is going to be removed in a next release.
	generateName?: string @go(GenerateName)

	// Namespace defines the space within each name must be unique. An empty namespace is
	// equivalent to the "default" namespace, but "default" is the canonical representation.
	// Not all objects are required to be scoped to a namespace - the value of this field for
	// those objects will be empty.
	//
	// Must be a DNS_LABEL.
	// Cannot be updated.
	// More info: http://kubernetes.io/docs/user-guide/namespaces
	// +optional
	//
	// Deprecated: This field has no function and is going to be removed in a next release.
	namespace?: string @go(Namespace)

	// Map of string keys and values that can be used to organize and categorize
	// (scope and select) objects. May match selectors of replication controllers
	// and services.
	// More info: http://kubernetes.io/docs/user-guide/labels
	// +optional
	labels?: {[string]: string} @go(Labels,map[string]string)

	// Annotations is an unstructured key value map stored with a resource that may be
	// set by external tools to store and retrieve arbitrary metadata. They are not
	// queryable and should be preserved when modifying objects.
	// More info: http://kubernetes.io/docs/user-guide/annotations
	// +optional
	annotations?: {[string]: string} @go(Annotations,map[string]string)

	// List of objects depended by this object. If ALL objects in the list have
	// been deleted, this object will be garbage collected. If this object is managed by a controller,
	// then an entry in this list will point to this controller, with the controller field set to true.
	// There cannot be more than one managing controller.
	// +optional
	// +patchMergeKey=uid
	// +patchStrategy=merge
	//
	// Deprecated: This field has no function and is going to be removed in a next release.
	ownerReferences?: [...metav1.#OwnerReference] @go(OwnerReferences,[]metav1.OwnerReference)
}
