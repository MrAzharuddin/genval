// Code generated by cue get go. DO NOT EDIT.

//cue:generate cue get go sigs.k8s.io/cluster-api/api/v1alpha3

package v1alpha3

import (
	corev1 "k8s.io/api/core/v1"
	capierrors "sigs.k8s.io/cluster-api/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// ClusterFinalizer is the finalizer used by the cluster controller to
// cleanup the cluster resources when a Cluster is being deleted.
#ClusterFinalizer: "cluster.cluster.x-k8s.io"

// ClusterSpec defines the desired state of Cluster.
#ClusterSpec: {
	// Paused can be used to prevent controllers from processing the Cluster and all its associated objects.
	// +optional
	paused?: bool @go(Paused)

	// Cluster network configuration.
	// +optional
	clusterNetwork?: null | #ClusterNetwork @go(ClusterNetwork,*ClusterNetwork)

	// ControlPlaneEndpoint represents the endpoint used to communicate with the control plane.
	// +optional
	controlPlaneEndpoint: #APIEndpoint @go(ControlPlaneEndpoint)

	// ControlPlaneRef is an optional reference to a provider-specific resource that holds
	// the details for provisioning the Control Plane for a Cluster.
	// +optional
	controlPlaneRef?: null | corev1.#ObjectReference @go(ControlPlaneRef,*corev1.ObjectReference)

	// InfrastructureRef is a reference to a provider-specific resource that holds the details
	// for provisioning infrastructure for a cluster in said provider.
	// +optional
	infrastructureRef?: null | corev1.#ObjectReference @go(InfrastructureRef,*corev1.ObjectReference)
}

// ClusterNetwork specifies the different networking
// parameters for a cluster.
#ClusterNetwork: {
	// APIServerPort specifies the port the API Server should bind to.
	// Defaults to 6443.
	// +optional
	apiServerPort?: null | int32 @go(APIServerPort,*int32)

	// The network ranges from which service VIPs are allocated.
	// +optional
	services?: null | #NetworkRanges @go(Services,*NetworkRanges)

	// The network ranges from which Pod networks are allocated.
	// +optional
	pods?: null | #NetworkRanges @go(Pods,*NetworkRanges)

	// Domain name for services.
	// +optional
	serviceDomain?: string @go(ServiceDomain)
}

// NetworkRanges represents ranges of network addresses.
#NetworkRanges: {
	cidrBlocks: [...string] @go(CIDRBlocks,[]string)
}

// ClusterStatus defines the observed state of Cluster.
#ClusterStatus: {
	// FailureDomains is a slice of failure domain objects synced from the infrastructure provider.
	failureDomains?: #FailureDomains @go(FailureDomains)

	// FailureReason indicates that there is a fatal problem reconciling the
	// state, and will be set to a token value suitable for
	// programmatic interpretation.
	// +optional
	failureReason?: null | capierrors.#ClusterStatusError @go(FailureReason,*capierrors.ClusterStatusError)

	// FailureMessage indicates that there is a fatal problem reconciling the
	// state, and will be set to a descriptive error message.
	// +optional
	failureMessage?: null | string @go(FailureMessage,*string)

	// Phase represents the current phase of cluster actuation.
	// E.g. Pending, Running, Terminating, Failed etc.
	// +optional
	phase?: string @go(Phase)

	// InfrastructureReady is the state of the infrastructure provider.
	// +optional
	infrastructureReady: bool @go(InfrastructureReady)

	// ControlPlaneInitialized defines if the control plane has been initialized.
	// +optional
	controlPlaneInitialized: bool @go(ControlPlaneInitialized)

	// ControlPlaneReady defines if the control plane is ready.
	// +optional
	controlPlaneReady?: bool @go(ControlPlaneReady)

	// Conditions defines current service state of the cluster.
	// +optional
	conditions?: #Conditions @go(Conditions)

	// ObservedGeneration is the latest generation observed by the controller.
	// +optional
	observedGeneration?: int64 @go(ObservedGeneration)
}

// APIEndpoint represents a reachable Kubernetes API endpoint.
#APIEndpoint: {
	// The hostname on which the API server is serving.
	host: string @go(Host)

	// The port on which the API server is serving.
	port: int32 @go(Port)
}

// Cluster is the Schema for the clusters API.
#Cluster: {
	metav1.#TypeMeta
	metadata?: metav1.#ObjectMeta @go(ObjectMeta)
	spec?:     #ClusterSpec       @go(Spec)
	status?:   #ClusterStatus     @go(Status)
}

// ClusterList contains a list of Cluster.
#ClusterList: {
	metav1.#TypeMeta
	metadata?: metav1.#ListMeta @go(ListMeta)
	items: [...#Cluster] @go(Items,[]Cluster)
}

// FailureDomains is a slice of FailureDomains.
#FailureDomains: {[string]: #FailureDomainSpec}

// FailureDomainSpec is the Schema for Cluster API failure domains.
// It allows controllers to understand how many failure domains a cluster can optionally span across.
#FailureDomainSpec: {
	// ControlPlane determines if this failure domain is suitable for use by control plane machines.
	// +optional
	controlPlane: bool @go(ControlPlane)

	// Attributes is a free form map of attributes an infrastructure provider might use or require.
	// +optional
	attributes?: {[string]: string} @go(Attributes,map[string]string)
}
